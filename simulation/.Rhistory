cities<-fetch(dbSendQuery(dbcon,qry2))
cities
m<-model.matrix(cities)
m<-model.matrix(formula(~cities),cities)
n<-100 #number of samples to train the NN on
dbcon<-dbConnect(MySQL(),user='g1090423',password='marioboys',dbname='g1090423',host='mydb.ics.purdue.edu')
qry<- paste("SELECT Zipcode, StorageCapacity, StorageType, BasePrice FROM Warehouse ORDER BY ID DESC LIMIT",n) #selecting last n warehouse entries
recent_entries<-fetch(dbSendQuery(dbcon,qry))
recent_entries$Zipcode<-as.numeric(recent_entries$Zipcode) #forcing zipcodes to numeric
recent_entries$BasePrice<-as.numeric(recent_entries$BasePrice)#forcing BasePrices to numeric
#creating the formula for the neural net
allVars<-colnames(recent_entries)
predictorVars<-allVars[!allVars%in%"BasePrice"] #BasePrice is target variable
predictorVars<-paste(predictorVars,collapse = "+")
form<-as.formula(paste("BasePrice~",predictorVars,collapse="+")) #writes formula how its needed for neuralnet
recent_entries
n<-100 #number of samples to train the NN on
dbcon<-dbConnect(MySQL(),user='g1090423',password='marioboys',dbname='g1090423',host='mydb.ics.purdue.edu')
qry<- paste("SELECT Zipcode, StorageCapacity, StorageType, BasePrice FROM Warehouse ORDER BY ID DESC LIMIT",n) #selecting last n warehouse entries
recent_entries<-fetch(dbSendQuery(dbcon,qry))
#forcing df values to numerics
recent_entries$Zipcode<-as.numeric(recent_entries$Zipcode)
recent_entries$BasePrice<-as.numeric(recent_entries$BasePrice)
recent_entries$StorageCapacity<-as.numeric(recent_entries$StorageCapacity)
recent_entries$StorageType<-as.numeric(recent_entries$StorageType)
#creating the formula for the neural net
allVars<-colnames(recent_entries)
predictorVars<-allVars[!allVars%in%"BasePrice"] #BasePrice is target variable
predictorVars<-paste(predictorVars,collapse = "+")
form<-as.formula(paste("BasePrice~",predictorVars,collapse="+")) #writes formula how its needed for neuralnet
for (con in all_cons){
dbDisconnect(con)
}
all_cons <- dbListConnections(MySQL())
for (con in all_cons){
dbDisconnect(con)
}
dbListConnections
dbListConnections(MySQL())
n<-100 #number of samples to train the NN on
dbcon<-dbConnect(MySQL(),user='g1090423',password='marioboys',dbname='g1090423',host='mydb.ics.purdue.edu')
qry<- paste("SELECT Zipcode, StorageCapacity, StorageType, BasePrice FROM Warehouse ORDER BY ID DESC LIMIT",n) #selecting last n warehouse entries
recent_entries<-fetch(dbSendQuery(dbcon,qry))
#forcing df values to numerics
recent_entries$Zipcode<-as.numeric(recent_entries$Zipcode)
recent_entries$BasePrice<-as.numeric(recent_entries$BasePrice)
recent_entries$StorageCapacity<-as.numeric(recent_entries$StorageCapacity)
recent_entries$StorageType<-as.numeric(recent_entries$StorageType)
#creating the formula for the neural net
allVars<-colnames(recent_entries)
predictorVars<-allVars[!allVars%in%"BasePrice"] #BasePrice is target variable
predictorVars<-paste(predictorVars,collapse = "+")
form<-as.formula(paste("BasePrice~",predictorVars,collapse="+")) #writes formula how its needed for neuralnet
form
neural<-neuralnet(formula=form,hidden=2, linear.output=T, data=recent_entries)
plot(neural)
all_cons <- dbListConnections(MySQL())
for (con in all_cons){
dbDisconnect(con)
}
neural<-neuralnet(formula=form,hidden=c(3,2), linear.output=T, data=recent_entries)
plot(neural)
cities
as.numeric("hello")
citiesqry<-paste("SELECT City FROM Warehouse ORDER BY ID DESC LIMIT",n)
cities_query
cities_qry
citiesqry
cities<-fetch(dbSendQuery(dbcon,citiesqry))
n<-100 #number of samples to train the NN on
dbcon<-dbConnect(MySQL(),user='g1090423',password='marioboys',dbname='g1090423',host='mydb.ics.purdue.edu')
qry<- paste("SELECT Zipcode, StorageCapacity, StorageType, BasePrice FROM Warehouse ORDER BY ID DESC LIMIT",n) #selecting last n warehouse entries
recent_entries<-fetch(dbSendQuery(dbcon,qry))
citiesqry<-paste("SELECT City FROM Warehouse ORDER BY ID DESC LIMIT",n)
cities<-fetch(dbSendQuery(dbcon,citiesqry))
#may be able to pull down cities separately, rbind to recent_entries, then try model.matrix
all_cons <- dbListConnections(MySQL())
for (con in all_cons){
dbDisconnect(con)
}
cities
rbind(recent_entries,cities)
n<-100 #number of samples to train the NN on
dbcon<-dbConnect(MySQL(),user='g1090423',password='marioboys',dbname='g1090423',host='mydb.ics.purdue.edu')
qry<- paste("SELECT Zipcode, StorageCapacity, StorageType, BasePrice,Latitude,Longitude FROM Warehouse ORDER BY ID DESC LIMIT",n) #selecting last n warehouse entries
recent_entries<-fetch(dbSendQuery(dbcon,qry))
#may be able to pull down cities separately, rbind to recent_entries, then try model.matrix
all_cons <- dbListConnections(MySQL())
for (con in all_cons){
dbDisconnect(con)
}
n<-100 #number of samples to train the NN on
dbcon<-dbConnect(MySQL(),user='g1090423',password='marioboys',dbname='g1090423',host='mydb.ics.purdue.edu')
qry<- paste("SELECT Zipcode, StorageCapacity, StorageType, BasePrice,Latitude,Longitude FROM Warehouse ORDER BY ID DESC LIMIT",n) #selecting last n warehouse entries
recent_entries<-fetch(dbSendQuery(dbcon,qry))
#may be able to pull down cities separately, rbind to recent_entries, then try model.matrix
all_cons <- dbListConnections(MySQL())
for (con in all_cons){
dbDisconnect(con)
}
#forcing df values to numerics
recent_entries$Zipcode<-as.numeric(recent_entries$Zipcode)
recent_entries$BasePrice<-as.numeric(recent_entries$BasePrice)
recent_entries$StorageCapacity<-as.numeric(recent_entries$StorageCapacity)
recent_entries$StorageType<-as.numeric(recent_entries$StorageType)
recent_entries$Latitude<-as.numeric(recent_entries$Latitude)
recent_entries$Longitude<-as.numeric(recent_entries$Longitude)
#creating the formula for the neural net
allVars<-colnames(recent_entries)
predictorVars<-allVars[!allVars%in%"BasePrice"] #BasePrice is target variable
predictorVars<-paste(predictorVars,collapse = "+")
form<-as.formula(paste("BasePrice~",predictorVars,collapse="+")) #writes formula how its needed for neuralnet
neural<-neuralnet(formula=form,hidden=c(3,2), linear.output=T, data=recent_entries)
plot(neural)
neural<-neuralnet(formula=form,hidden=c(4,2), linear.output=T, data=recent_entries)
plot(neural)
all_cons <- dbListConnections(MySQL())
for (con in all_cons){
dbDisconnect(con)
}
n<-10
n
paste("hello",n,"there")
source('~/GitHub/WARIE/simulation/DailyNN.R')
plot(neural)
source('~/GitHub/WARIE/simulation/Search.R')
source('~/GitHub/WARIE/simulation/Search.R')
source('~/GitHub/WARIE/simulation/Search.R')
start_date<-as.Date(11/19/2018)
?as.Date(0)
start_date<-as.Date(11/19/2018,%mm/%dd/%yyyy)
start_date<-as.Date(11/19/2018,%m%/d/%y)
start_date<-as.Date(11/19/2018,%m/%d/%y)
start_date<-as.Date(11/19/2018,"%m/%d/%y")
start_date<-as.Date(11-19-2018,"%m/%d/%y")
start_date<-as.Date("11-19-2018","%m/%d/%y")
end_date<-as.Date("12-19-2018","%m/%d/%y")
end_date<-as.Date("1-19-2019","%m/%d/%y")
Search(1,start_date,end_date,75277,2000,1,0)
source('~/GitHub/WARIE/simulation/Search.R')
Search(1,start_date,end_date,75277,2000,1,0)
source('~/GitHub/WARIE/simulation/Search.R')
Search(1,start_date,end_date,75277,2000,1,0)
source('~/GitHub/WARIE/simulation/Search.R')
Search<-function(storage_type, start_date, end_date, zipcode, storage_needed,sort_user_rating, sort_price){
#Scores fed in warehouses based on parameters and search preferences
#connect db
mydb<-dbConnect(MySQL(),user="g1090423",password="marioboys",dbname="g1090423",host = "mydb.ics.purdue.edu")
currentDay<-Sys.Date()
start_date<-ceiling((start_date - currentDay)/7)
end_date<-ceiling((end_date- currentDay)/7)
qry1<-paste("SELECT * FROM Warehouse WHERE StorageType =",storage_type,"AND Zipcode =",zipcode, "AND",
storage_needed,"<=(SELECT MIN(Open_Space) FROM Availability WHERE WeekFromDate BETWEEN",start_date, "AND",end_date,")")
filtered_warehouses<-fetch(dbSendQuery(mydb, qry1),n=-1)
zipcode<-75277
storage_needed<-2000
sort_user_rating<-1
sort_price<-0
#Scores fed in warehouses based on parameters and search preferences
#connect db
mydb<-dbConnect(MySQL(),user="g1090423",password="marioboys",dbname="g1090423",host = "mydb.ics.purdue.edu")
currentDay<-Sys.Date()
start_date<-ceiling((start_date - currentDay)/7)
end_date<-ceiling((end_date- currentDay)/7)
qry1<-paste("SELECT * FROM Warehouse WHERE StorageType =",storage_type,"AND Zipcode =",zipcode, "AND",
storage_needed,"<=(SELECT MIN(Open_Space) FROM Availability WHERE WeekFromDate BETWEEN",start_date, "AND",end_date,")")
storage_type<-1
#Scores fed in warehouses based on parameters and search preferences
#connect db
mydb<-dbConnect(MySQL(),user="g1090423",password="marioboys",dbname="g1090423",host = "mydb.ics.purdue.edu")
currentDay<-Sys.Date()
start_date<-ceiling((start_date - currentDay)/7)
end_date<-ceiling((end_date- currentDay)/7)
qry1<-paste("SELECT * FROM Warehouse WHERE StorageType =",storage_type,"AND Zipcode =",zipcode, "AND",
storage_needed,"<=(SELECT MIN(Open_Space) FROM Availability WHERE WeekFromDate BETWEEN",start_date, "AND",end_date,")")
qry1
start_date<-ceiling((start_date - currentDay)/7)
start_date
currentDay
start_date<-("2018-11-19","%y/%m/%d")
start_date<-as.Date("2018-11-19","%y/%m/%d")
end_date<-as.Date("2019-1-19","%y/%m/%d")
#connect db
mydb<-dbConnect(MySQL(),user="g1090423",password="marioboys",dbname="g1090423",host = "mydb.ics.purdue.edu")
currentDay<-Sys.Date()
start_date<-ceiling((start_date - currentDay)/7)
end_date<-ceiling((end_date- currentDay)/7)
qry1<-paste("SELECT * FROM Warehouse WHERE StorageType =",storage_type,"AND Zipcode =",zipcode, "AND",
storage_needed,"<=(SELECT MIN(Open_Space) FROM Availability WHERE WeekFromDate BETWEEN",start_date, "AND",end_date,")")
filtered_warehouses<-fetch(dbSendQuery(mydb, qry1),n=-1)
qry1
start_date
currentDay
start_date<-ceiling((start_date - currentDay)/7)
?difftime
start_date<-ceiling(difftime(start_date - currentDay)/7)
source('~/GitHub/WARIE/simulation/Search.R')
start_date<-ceiling(as.data.frame(start_date - currentDay)/7)
start_date<-as.data.frame(as.Date("2018-11-19","%y/%m/%d"))
start_date
for (con in all_cons)
{
dbDisconnect(con)
}
all_cons <- dbListConnections(MySQL())
for (con in all_cons)
{
dbDisconnect(con)
}
storage_type<-1
sort_user_rating<-1
sort_price<-0
storage_needed<-2000
zipcode<-75277
start_date1<-as.Date("2018-11-19","%y/%m/%d")
start_date1<-as.Date("2019-1-19","%y/%m/%d")
start_date1<-as.Date("2018-11-19","%y/%m/%d")
end_date1<-as.Date("2019-1-19","%y/%m/%d")
currentDay<-Sys.Date()
start_date<-ceiling((start_date1 - currentDay)/7)
end_date<-ceiling((end_date1- currentDay)/7)
start_date
difftime(start_date1,currentDay)
start_date1
> start_date1<-as.Date("2018-11-19","%y/%m/%d")
start_date1<-as.Date("2018-11-19","%y/%m/%d")
start_date1
start_date1<-as.Date("2018-11-19","%y-%m-%d")
start_date1<-as.Date("2018-11-19")
end_date1<-as.Date("2019-1-19")
currentDay<-Sys.Date()
start_date<-ceiling((start_date1 - currentDay)/7)
end_date<-ceiling((end_date1- currentDay)/7)
start_date
end_date
as.numeric(end_date)
source('~/GitHub/WARIE/simulation/Search.R')
start_date<-as.numeric(ceiling((start_date1 - currentDay)/7))
end_date<-as.numeric(ceiling((end_date1- currentDay)/7))
qry1<-paste("SELECT * FROM Warehouse WHERE StorageType =",storage_type,"AND Zipcode =",zipcode, "AND",
storage_needed,"<=(SELECT MIN(Open_Space) FROM Availability WHERE WeekFromDate BETWEEN",start_date, "AND",end_date,")")
qry1
mydb<-dbConnect(MySQL(),user="g1090423",password="marioboys",dbname="g1090423",host = "mydb.ics.purdue.edu")
qry1<-paste("SELECT * FROM Warehouse WHERE StorageType =",storage_type,"AND Zipcode =",zipcode, "AND",
storage_needed,"<=(SELECT MIN(Open_Space) FROM Availability WHERE WeekFromDate BETWEEN",start_date, "AND",end_date,")")
filtered_warehouses<-fetch(dbSendQuery(mydb, qry1),n=-1)
source('~/GitHub/WARIE/simulation/Search.R')
qry1<-paste("SELECT * FROM Warehouse WHERE StorageType =",storage_type,"AND Zipcode =",zipcode, "AND",
storage_needed,"<=(SELECT MIN(Open_Space) FROM Availability WHERE WeekFromDate BETWEEN",start_date, "AND",end_date,"Group By WarehouseID)")
filtered_warehouses<-fetch(dbSendQuery(mydb, qry1),n=-1)
qry2<-paste("SELECT * FROM Warehouse W WHERE StorageType =",storage_type,"AND Zipcode =",zipcode,"LEFT JOIN Availability A ON W.WarehouseID = A.WarehouseID")
qry2
fetch(dbSendQuery(mydb,qry2),n=-1)
source('~/GitHub/WARIE/simulation/Search.R')
qry2<-paste("SELECT * FROM Warehouse W WHERE StorageType =",storage_type,"AND Zipcode =",zipcode,"LEFT JOIN (SELECT MIN(Open_Space),ID FROM Availability WHERE WeekFromDate BETWEEN",start_date, "AND",end_date,"Group By WarehouseID) A ON W.WarehouseID = A.WarehouseID")
fetch(dbSendQuery(mydb,qry2),n=-1)
source('~/GitHub/WARIE/simulation/Search.R')
qry2<-paste("SELECT * FROM Warehouse W WHERE StorageType =",storage_type,"AND Zipcode =",zipcode,"LEFT JOIN (SELECT MIN(Open_Space),WarehouseID FROM Availability WHERE WeekFromDate BETWEEN",start_date, "AND",end_date,"Group By WarehouseID) A ON W.WarehouseID = A.WarehouseID")
fetch(dbSendQuery(mydb,qry2),n=-1)
source('~/GitHub/WARIE/simulation/Search.R')
qry2<-paste("SELECT * FROM Warehouse W WHERE StorageType =",storage_type,"AND Zipcode =",zipcode,"inner JOIN (SELECT MIN(Open_Space),WarehouseID FROM Availability WHERE WeekFromDate BETWEEN",start_date, "AND",end_date,"Group By WarehouseID) A ON W.WarehouseID = A.WarehouseID")
fetch(dbSendQuery(mydb,qry2),n=-1)
qry2
qry2<-paste("SELECT * FROM Warehouse W inner JOIN (SELECT MIN(Open_Space),WarehouseID FROM Availability WHERE WeekFromDate BETWEEN",start_date, "AND", end_date "Group By WarehouseID) A ON W.ID = A.WarehouseID WHERE StorageType =",storage_type, "AND Zipcode =", zipcode)
debugSource('~/GitHub/WARIE/simulation/Search.R')
qry2<-paste("SELECT * FROM Warehouse W inner JOIN (SELECT MIN(Open_Space),WarehouseID FROM Availability WHERE WeekFromDate BETWEEN",start_date, "AND", end_date, "Group By WarehouseID) A ON W.ID = A.WarehouseID WHERE StorageType =",storage_type, "AND Zipcode =", zipcode)
qry2
mydb<-dbConnect(MySQL(),user="g1090423",password="marioboys",dbname="g1090423",host = "mydb.ics.purdue.edu")
currentDay<-Sys.Date()
start_date<-as.numeric(ceiling((start_date1 - currentDay)/7))
end_date<-as.numeric(ceiling((end_date1- currentDay)/7))
qry<-paste("SELECT * FROM Warehouse W inner JOIN (SELECT MIN(Open_Space),WarehouseID FROM Availability WHERE WeekFromDate BETWEEN",start_date, "AND", end_date, "Group By WarehouseID) A ON W.ID = A.WarehouseID WHERE StorageType =",storage_type, "AND Zipcode =", zipcode)
filtered_warehouses<-fetch(dbSendQuery(mydb, qry),n=-1)
start_date
end_date
start_date1
source('~/GitHub/WARIE/simulation/Search.R')
qry<-paste("SELECT * FROM Warehouse W inner JOIN (SELECT MIN(Open_Space),WarehouseID FROM Availability WHERE WeekFromDate BETWEEN",start_date1, "AND", end_date1, "Group By WarehouseID) A ON W.ID = A.WarehouseID WHERE StorageType =",storage_type, "AND Zipcode =", zipcode)
filtered_warehouses<-fetch(dbSendQuery(mydb, qry),n=-1)
mydb<-dbConnect(MySQL(),user="g1090423",password="marioboys",dbname="g1090423",host = "mydb.ics.purdue.edu")
currentDay<-Sys.Date()
start_date<-as.data.frame(ceiling((start_date1 - currentDay)/7))
end_date<-as.numeric(ceiling((end_date1- currentDay)/7))
qry<-paste("SELECT * FROM Warehouse W inner JOIN (SELECT MIN(Open_Space),WarehouseID FROM Availability WHERE WeekFromDate BETWEEN",start_date1, "AND", end_date1, "Group By WarehouseID) A ON W.ID = A.WarehouseID WHERE StorageType =",storage_type, "AND Zipcode =", zipcode)
filtered_warehouses<-fetch(dbSendQuery(mydb, qry),n=-1)
source('~/GitHub/WARIE/simulation/Search.R')
source('~/GitHub/WARIE/simulation/Search.R')
#connect db
mydb<-dbConnect(MySQL(),user="g1090423",password="marioboys",dbname="g1090423",host = "mydb.ics.purdue.edu")
currentDay<-Sys.Date()
start_date<-as.data.frame(ceiling((start_date1 - currentDay)/7))
end_date<-as.data.frame(ceiling((end_date1- currentDay)/7))
qry<-paste("SELECT * FROM Warehouse W inner JOIN (SELECT MIN(Open_Space),WarehouseID FROM Availability WHERE WeekFromDate BETWEEN",start_date1, "AND", end_date1, "Group By WarehouseID) A ON W.ID = A.WarehouseID WHERE StorageType =",storage_type, "AND Zipcode =", zipcode)
filtered_warehouses<-fetch(dbSendQuery(mydb, qry),n=-1)
#connect db
mydb<-dbConnect(MySQL(),user="g1090423",password="marioboys",dbname="g1090423",host = "mydb.ics.purdue.edu")
currentDay<-Sys.Date()
start_date<-as.data.frame(ceiling((start_date1 - currentDay)/7))
end_date<-as.data.frame(ceiling((end_date1- currentDay)/7))
qry<-paste("SELECT * FROM Warehouse W inner JOIN (SELECT MIN(Open_Space),WarehouseID FROM Availability WHERE WeekFromDate BETWEEN",start_date, "AND", end_date, "Group By WarehouseID) A ON W.ID = A.WarehouseID WHERE StorageType =",storage_type, "AND Zipcode =", zipcode)
filtered_warehouses<-fetch(dbSendQuery(mydb, qry),n=-1)
filtered_warehouses
storage_type<-4
currentDay<-Sys.Date()
start_date<-as.data.frame(ceiling((start_date1 - currentDay)/7))
end_date<-as.data.frame(ceiling((end_date1- currentDay)/7))
qry<-paste("SELECT * FROM Warehouse W inner JOIN (SELECT MIN(Open_Space),WarehouseID FROM Availability WHERE WeekFromDate BETWEEN",start_date, "AND", end_date, "Group By WarehouseID) A ON W.ID = A.WarehouseID WHERE StorageType =",storage_type, "AND Zipcode =", zipcode)
filtered_warehouses<-fetch(dbSendQuery(mydb, qry),n=-1)
filtered_warehouses
qry<-paste("SELECT ID,StorageCapacity,BasePrice,Zipcode,City,State,Owner_ID FROM Warehouse W inner JOIN (SELECT MIN(Open_Space),WarehouseID FROM Availability WHERE WeekFromDate BETWEEN",start_date, "AND", end_date, "Group By WarehouseID) A ON W.ID = A.WarehouseID WHERE StorageType =",storage_type, "AND Zipcode =", zipcode)
filtered_warehouses<-fetch(dbSendQuery(mydb, qry),n=-1)
filtered_warehouses
source('~/GitHub/WARIE/simulation/Search.R')
qry<-paste("SELECT ID,StorageCapacity,BasePrice,Zipcode,City,State,Owner_ID FROM Warehouse W inner JOIN (SELECT MIN(Open_Space),WarehouseID FROM Availability WHERE WeekFromDate BETWEEN",start_date, "AND", end_date, "Group By WarehouseID) A ON W.ID = A.WarehouseID WHERE StorageType =",storage_type, "AND City =", city)
city<-"Dallas"
qry<-paste("SELECT ID,StorageCapacity,BasePrice,Zipcode,City,State,Owner_ID FROM Warehouse W inner JOIN (SELECT MIN(Open_Space),WarehouseID FROM Availability WHERE WeekFromDate BETWEEN",start_date, "AND", end_date, "Group By WarehouseID) A ON W.ID = A.WarehouseID WHERE StorageType =",storage_type, "AND City =", city)
filtered_warehouses<-fetch(dbSendQuery(mydb, qry),n=-1)
filtered_warehouses
qry
source('~/GitHub/WARIE/simulation/Search.R')
qry<-paste("SELECT ID,StorageCapacity,BasePrice,Zipcode,City,State,Owner_ID FROM Warehouse W inner JOIN (SELECT MIN(Open_Space),WarehouseID FROM Availability WHERE WeekFromDate BETWEEN",start_date, "AND", end_date, "Group By WarehouseID) A ON W.ID = A.WarehouseID WHERE StorageType =",storage_type, "AND City = ``", city,"``")
filtered_warehouses<-fetch(dbSendQuery(mydb, qry),n=-1)
source('~/GitHub/WARIE/simulation/Search.R')
qry<-paste("SELECT ID,StorageCapacity,BasePrice,Zipcode,City,State,Owner_ID FROM Warehouse W inner JOIN (SELECT MIN(Open_Space),WarehouseID FROM Availability WHERE WeekFromDate BETWEEN",start_date, "AND", end_date, "Group By WarehouseID) A ON W.ID = A.WarehouseID WHERE StorageType =",storage_type, "AND City = ``", city,"''")
filtered_warehouses<-fetch(dbSendQuery(mydb, qry),n=-1)
qry
source('~/GitHub/WARIE/simulation/Search.R')
qry<-paste("SELECT ID,StorageCapacity,BasePrice,Zipcode,City,State,Owner_ID FROM Warehouse W inner JOIN (SELECT MIN(Open_Space),WarehouseID FROM Availability WHERE WeekFromDate BETWEEN",start_date, "AND", end_date, "Group By WarehouseID) A ON W.ID = A.WarehouseID WHERE StorageType =",storage_type, "AND City = '", city,"'")
filtered_warehouses<-fetch(dbSendQuery(mydb, qry),n=-1)
filtered_warehosues
filtered_warehouses
qry
?paste
source('~/GitHub/WARIE/simulation/Search.R')
source('~/GitHub/WARIE/simulation/Search.R')
qry<-paste("SELECT ID,StorageCapacity,BasePrice,Zipcode,City,State,Owner_ID FROM Warehouse W inner JOIN (SELECT MIN(Open_Space),WarehouseID FROM Availability WHERE WeekFromDate BETWEEN",start_date, "AND", end_date, "Group By WarehouseID) A ON W.ID = A.WarehouseID WHERE StorageType =",storage_type)
qry2<-paste(qry,"AND City = '",city,"'",sep="")
qry2
source('~/GitHub/WARIE/simulation/Search.R')
qry1<-paste("SELECT ID,StorageCapacity,BasePrice,Zipcode,City,State,Owner_ID FROM Warehouse W inner JOIN (SELECT MIN(Open_Space),WarehouseID FROM Availability WHERE WeekFromDate BETWEEN",start_date, "AND", end_date, "Group By WarehouseID) A ON W.ID = A.WarehouseID WHERE StorageType =",storage_type)
qry<-paste(qry1,"AND City = '",city,"'",sep="")
filtered_warehouses<-fetch(dbSendQuery(mydb, qry),n=-1)
qry
source('~/GitHub/WARIE/simulation/Search.R')
qry1<-paste("SELECT ID,StorageCapacity,BasePrice,Zipcode,City,State,Owner_ID FROM Warehouse W inner JOIN (SELECT MIN(Open_Space),WarehouseID FROM Availability WHERE WeekFromDate BETWEEN",start_date, "AND", end_date, "Group By WarehouseID) A ON W.ID = A.WarehouseID WHERE StorageType =",storage_type)
qry<-paste(qry1," AND City = '",city,"'",sep="")
filtered_warehouses<-fetch(dbSendQuery(mydb, qry),n=-1)
filtered_warehouses
require("neuralnet")
library(neuralnet)
n<-100#number of samples we want to use to train the neural network
#THIS METHOD OF CREATING TRAINING/TESTING DATA ISN'T GOOD, NEED TO FIND A NEW WAY TO CREATE BETTER TRAINING/TESTING DATA
populations<-sample(.5:9,n,replace=TRUE)
prices<-sample(5.00:13.00,n,replace=TRUE) #could be inputted using regression
rating<- sample(1:5,n,replace=TRUE)
storagetype<-sample(1:4,n,replace=TRUE)
populations<-sort(populations,decreasing=TRUE)
prices<-sort(prices,decreasing=TRUE)
rating<-sort(rating,decreasing=TRUE)
storagetype<-sort(storagetype,decreasing=TRUE)
#Create data fame that is split into training/testing data
df<-data.frame(populations,rating,storagetype,prices) #it's important that prices is last
ind<-sample(1:nrow(df),70)
trainDF<-df[ind,]
testDF<-df[-ind,]
#creating formula for neuralnet function
allVars<-colnames(df)
predictorVars<-allVars[!allVars%in%"prices"] #price is target variable
predictorVars<-paste(predictorVars,collapse = "+")
form<-as.formula(paste("prices~",predictorVars,collapse="+")) #writes formula how its needed for neuralnet
#Train neural net --
#Input Hidden1 Output
#3      2       1
neural<-neuralnet(formula=form,hidden=2), linear.output=T, data=trainDF)
plot(neural)
neural
form
neural<-neuralnet(formula=form,hidden=2), linear.output=T, data=trainDF)
neural<-neuralnet(formula=form,hidden=2, linear.output=T, data=trainDF)
plot(neural)
predictions<-compute(neural,testDF[,1:3]) #[,1:3] ensures that we use all variables used for prediction, excluding price (bc price is the target)
predictions
source('~/GitHub/WARIE/simulation/neural.R')
pops<-sample(.5:9,200)
pops<-sample(.5:9,200,replace+T)
pops<-sample(.5:9,200,replace=T)
price<-compute(neural,pops)
source("neural.R")
source('~/GitHub/WARIE/simulation/InitiateDatabase.R')
WLOGen() ##Creates data for Warehouses,Lessees,and Owners. Deletes old info and Uploads that info to MYSQL database
source('~/GitHub/WARIE/simulation/InitiateDatabase.R')
source("simulation_data.R")
source('~/GitHub/WARIE/simulation/InitiateDatabase.R')
source("WLOGen")
source('~/GitHub/WARIE/simulation/InitiateDatabase.R')
source("UpdateAvail for all the contracts.R")
WLOGen() ##Creates data for Warehouses,Lessees,and Owners. Deletes old info and Uploads that info to MYSQL database
source('~/GitHub/WARIE/simulation/simulation_data.R')
InitiateDatabase()
mydb
mydb<-dbConnect(MySQL(),user="g1090423",password="marioboys",dbname="g1090423",host = "mydb.ics.purdue.edu")
currentDay<-Sys.Date()
start_date<-as.data.frame(ceiling((start_date1 - currentDay)/7))
end_date<-as.data.frame(ceiling((end_date1- currentDay)/7))
qry1<-paste("SELECT ID,StorageCapacity,BasePrice,Zipcode,City,State,Owner_ID FROM Warehouse W inner JOIN (SELECT MIN(Open_Space),WarehouseID FROM Availability WHERE WeekFromDate BETWEEN",start_date, "AND", end_date, "Group By WarehouseID) A ON W.ID = A.WarehouseID WHERE StorageType =",storage_type)
qry<-paste(qry1," AND City = '",city,"'",sep="")
filtered_warehouses<-fetch(dbSendQuery(mydb, qry),n=-1)
filtered_warehouses
dev_percent<-.15
runif(1,min=(1-dev_percent),max=(1+dev_percent))
runif(1,min=(1-dev_percent),max=(1+dev_percent)) #
runif(1,min=(1-dev_percent),max=(1+dev_percent)) #
runif(1,min=(1-dev_percent),max=(1+dev_percent)) #
runif(1,min=(1-dev_percent),max=(1+dev_percent)) #
setseed(123)
?set.seed
seed<-set.seed(123)
seed
set.seed(123)
runif(1,min=(1-dev_percent),max=(1+dev_percent)) #
runif(1,min=(1-dev_percent),max=(1+dev_percent)) #
runif(1,min=(1-dev_percent),max=(1+dev_percent)) #
source('~/GitHub/WARIE/simulation/InitiateDatabase.R')
ContractGen()##Creates contract data and Deletes Old /Uploads newly created data to MySqL
source('~/GitHub/WARIE/simulation/InitiateDatabase.R')
InitiateDatabase()
mydb<-dbConnect(MySQL(),user="g1090423",password="marioboys",dbname="g1090423",host = "mydb.ics.purdue.edu")
currentDay<-Sys.Date()
start_date<-as.data.frame(ceiling((start_date1 - currentDay)/7))
end_date<-as.data.frame(ceiling((end_date1- currentDay)/7))
qry1<-paste("SELECT ID,StorageCapacity,BasePrice,Zipcode,City,State,Owner_ID FROM Warehouse W inner JOIN (SELECT MIN(Open_Space),WarehouseID FROM Availability WHERE WeekFromDate BETWEEN",start_date, "AND", end_date, "Group By WarehouseID) A ON W.ID = A.WarehouseID WHERE StorageType =",storage_type)
qry<-paste(qry1," AND City = '",city,"'",sep="")
filtered_warehouses<-fetch(dbSendQuery(mydb, qry),n=-1)
filtered_warehouses
source('~/GitHub/WARIE/simulation/getPrices.R')
source('~/GitHub/WARIE/simulation/simulation_data.R')
source('~/GitHub/WARIE/simulation/InitiateDatabase.R')
InitiateDatabase()
source('~/GitHub/WARIE/simulation/simulation_data.R')
InitiateDatabase()
source('~/GitHub/WARIE/simulation/simulation_data.R')
InitiateDatabase()
mydb<-dbConnect(MySQL(),user="g1090423",password="marioboys",dbname="g1090423",host = "mydb.ics.purdue.edu")
currentDay<-Sys.Date()
start_date<-as.data.frame(ceiling((start_date1 - currentDay)/7))
end_date<-as.data.frame(ceiling((end_date1- currentDay)/7))
qry1<-paste("SELECT ID,StorageCapacity,BasePrice,Zipcode,City,State,Owner_ID FROM Warehouse W inner JOIN (SELECT MIN(Open_Space),WarehouseID FROM Availability WHERE WeekFromDate BETWEEN",start_date, "AND", end_date, "Group By WarehouseID) A ON W.ID = A.WarehouseID WHERE StorageType =",storage_type)
qry<-paste(qry1," AND City = '",city,"'",sep="")
filtered_warehouses<-fetch(dbSendQuery(mydb, qry),n=-1)
filtered_warehouses
source('~/GitHub/WARIE/simulation/simulation_data.R')
source('~/GitHub/WARIE/simulation/simulation_data.R')
source('~/GitHub/WARIE/simulation/simulation_data.R')
source('~/GitHub/WARIE/simulation/simulation_data.R')
source('~/GitHub/WARIE/simulation/simulation_data.R')
source('~/GitHub/WARIE/simulation/simulation_data.R')
source('~/GitHub/WARIE/simulation/simulation_data.R')
InitiateDatabase()
source('~/GitHub/WARIE/simulation/simulation_data.R')
InitiateDatabase()
source('~/GitHub/WARIE/simulation/simulation_data.R')
source('~/GitHub/WARIE/simulation/InitiateDatabase.R')
InitiateDatabase()
source('~/GitHub/WARIE/simulation/simulation_data.R')
source('~/GitHub/WARIE/simulation/InitiateDatabase.R')
InitiateDatabase()
source('~/GitHub/WARIE/simulation/simulation_data.R')
source('~/GitHub/WARIE/simulation/simulation_data.R')
InitiateDatabase()
source('~/GitHub/WARIE/simulation/Search.R')
all_cons <- dbListConnections(MySQL())
for (con in all_cons)
{
dbDisconnect(con)
}
mydb<-dbConnect(MySQL(),user="g1090423",password="marioboys",dbname="g1090423",host = "mydb.ics.purdue.edu")
currentDay<-Sys.Date()
start_date<-as.data.frame(ceiling((start_date1 - currentDay)/7))
end_date<-as.data.frame(ceiling((end_date1- currentDay)/7))
qry1<-paste("SELECT ID,StorageCapacity,BasePrice,Zipcode,City,State,Owner_ID FROM Warehouse W inner JOIN (SELECT MIN(Open_Space),WarehouseID FROM Availability WHERE WeekFromDate BETWEEN",start_date, "AND", end_date, "Group By WarehouseID) A ON W.ID = A.WarehouseID WHERE StorageType =",storage_type)
qry<-paste(qry1," AND City = '",city,"'",sep="")
filtered_warehouses<-fetch(dbSendQuery(mydb, qry),n=-1)
filtered_warehouses
source('~/GitHub/WARIE/simulation/simulation_data.R')
InitiateDatabase()
qry1<-paste("SELECT ID,StorageCapacity,BasePrice,Zipcode,City,State,Owner_ID FROM Warehouse W inner JOIN (SELECT MIN(Open_Space),WarehouseID FROM Availability WHERE WeekFromDate BETWEEN",start_date, "AND", end_date, "Group By WarehouseID) A ON W.ID = A.WarehouseID WHERE StorageType =",storage_type)
qry<-paste(qry1," AND City = '",city,"'",sep="")
qry
source('~/GitHub/WARIE/simulation/Search.R')
qry1<-paste("SELECT W.ID,StorageCapacity,BasePrice,Zipcode,City,State,Owner_ID,Owner_Rating FROM (Warehouse W inner JOIN (SELECT MIN(Open_Space),WarehouseID FROM Availability WHERE WeekFromDate BETWEEN",start_date, "AND", end_date, "Group By WarehouseID) A ON W.ID = A.WarehouseID)
INNER JOIN (SELECT Rating,Owner.ID FROM Owner) R ON W.Owner_ID=R.ID WHERE StorageType =",storage_type)
qry<-paste(qry1," AND City = '",city,"'",sep="")
filtered_warehouses<-fetch(dbSendQuery(mydb, qry),n=-1)
mydb<-dbConnect(MySQL(),user="g1090423",password="marioboys",dbname="g1090423",host = "mydb.ics.purdue.edu")
currentDay<-Sys.Date()
start_date<-as.data.frame(ceiling((start_date1 - currentDay)/7))
end_date<-as.data.frame(ceiling((end_date1- currentDay)/7))
qry1<-paste("SELECT W.ID,StorageCapacity,BasePrice,Zipcode,City,State,Owner_ID,Owner_Rating FROM (Warehouse W inner JOIN (SELECT MIN(Open_Space),WarehouseID FROM Availability WHERE WeekFromDate BETWEEN",start_date, "AND", end_date, "Group By WarehouseID) A ON W.ID = A.WarehouseID)
INNER JOIN (SELECT Rating,Owner.ID FROM Owner) R ON W.Owner_ID=R.ID WHERE StorageType =",storage_type)
qry<-paste(qry1," AND City = '",city,"'",sep="")
filtered_warehouses<-fetch(dbSendQuery(mydb, qry),n=-1)
source('~/GitHub/WARIE/simulation/Search.R')
mydb<-dbConnect(MySQL(),user="g1090423",password="marioboys",dbname="g1090423",host = "mydb.ics.purdue.edu")
currentDay<-Sys.Date()
start_date<-as.data.frame(ceiling((start_date1 - currentDay)/7))
end_date<-as.data.frame(ceiling((end_date1- currentDay)/7))
qry1<-paste("SELECT W.ID,StorageCapacity,BasePrice,Zipcode,City,State,Owner_ID,R.Rating as Owner_Rating FROM (Warehouse W inner JOIN (SELECT MIN(Open_Space),WarehouseID FROM Availability WHERE WeekFromDate BETWEEN",start_date, "AND", end_date, "Group By WarehouseID) A ON W.ID = A.WarehouseID)
INNER JOIN (SELECT Rating,Owner.ID FROM Owner) R ON W.Owner_ID=R.ID WHERE StorageType =",storage_type)
qry<-paste(qry1," AND City = '",city,"'",sep="")
filtered_warehouses<-fetch(dbSendQuery(mydb, qry),n=-1)
filtered_warehouses
source('~/GitHub/WARIE/simulation/neural.R')
