score_vec[i]<-score
}
else if(sort_price==1){
#calc score
score<-(bestweight*as.numeric((FW_df$Price[i])))  + (weight*(5-(as.numeric(FW_df$UserRating[i]))))
score_vec[i]<-score
}
}
final_scores<-score_vec
ID_score<-data.frame(wID,final_scores)
dbDisconnect(dbcon)
ID_score
?order
order(FW_df,decreasing=TRUE)
ID_score[order(final_scores)]
ID_score[order(final_scores),]
FW_df
ID_score
order[ID_score(-final_score),]
ID_score[order(-final_score),]
ID_score[order(-final_scores),]
ID_score<-ID_score[order(-final_scores),]
ID_score
x1<-c(1:6)
x2<-c(7:12)
x3<-c(13:18)
x4<-c(19:24)
df<-data.frame(x1,x2,x3,x4)
df
df1<-df[1]
df4<-df[4]
df<-data.frame(df1,df4)
df
df$x4[2]
as.numeric(df$x4[2])
?paste
string<-"hello my age is"
age<-19
string2<-paste(string,age,sep=" ")
string2
n<-100
qry<- paste("SELECT ID, Zipcode, City, BasePrice FROM Warehouse ORDER BY ID DESC LIMIT ",n)
qry
qry<- paste("SELECT ID, Zipcode, City, BasePrice FROM Warehouse ORDER BY ID DESC LIMIT",n)
qry
require(neuralnet)
library(neuralnet)
n<-100 #number of samples to train the NN on
dbcon<-dbConnect(MySQL(),user='g1090423',password='marioboys',dbname='g1090423',host='mydb.ics.purdue.edu')
qry<- paste("SELECT ID, Zipcode, City, BasePrice FROM Warehouse ORDER BY ID DESC LIMIT",n)
recent_entries<-fetch(dbSendQuery(dbcon,qry))
?neuralnet
?neural
recent_entries
library(neuralnet)
install.packages(neuralnet)
install.packages("neuralnet")
require("neuralnet")
library(neuralnet)
n<-100 #number of samples to train the NN on
dbcon<-dbConnect(MySQL(),user='g1090423',password='marioboys',dbname='g1090423',host='mydb.ics.purdue.edu')
qry<- paste("SELECT ID, Zipcode, City, BasePrice FROM Warehouse ORDER BY ID DESC LIMIT",n)
recent_entries<-fetch(dbSendQuery(dbcon,qry))
allVars<-colnames(recent_entries)
allVars
allVars<-colnames(recent_entries)
predictorVars<-allVars[!allVars%in%"BasePrice"] #BasePrice is target variable
predictorVars<-paste(predictorVars,collapse = "+")
form<-as.formula(paste("BasePrice~",predictorVars,collapse="+")) #writes formula how its needed for neuralnet
form
neural<-neuralnet(formula=form,hidden=2, linear.output=T, data=recent_entries)
neural<-neuralnet(formula=form,hidden=c(3,2), linear.output=T, data=recent_entries)
form
neural<-neuralnet(formula=form,hidden=c(2,2), linear.output=T, data=trainDF)
neural<-neuralnet(formula=form,hidden=c(2,2), linear.output=T, data=recent_entries)
recent_entries
require("neuralnet")
library(neuralnet)
n<-100 #number of samples to train the NN on
dbcon<-dbConnect(MySQL(),user='g1090423',password='marioboys',dbname='g1090423',host='mydb.ics.purdue.edu')
qry<- paste("SELECT ID, Zipcode, BasePrice FROM Warehouse ORDER BY ID DESC LIMIT",n)
recent_entries<-fetch(dbSendQuery(dbcon,qry))
ind<-sample(1:nrow(df),(n*0.70)) #creates the split of data, 70% of n gong to training, 30% going to testing
trainDF<-df[ind,]
testDF<-df[-ind,]
#may not need testDF
#creating the formula for the neural net
allVars<-colnames(recent_entries)
predictorVars<-allVars[!allVars%in%"BasePrice"] #BasePrice is target variable
predictorVars<-paste(predictorVars,collapse = "+")
form<-as.formula(paste("BasePrice~",predictorVars,collapse="+")) #writes formula how its needed for neuralnet
neural<-neuralnet(formula=form,hidden=c(2,2), linear.output=T, data=recent_entries)
recent_entries
require("neuralnet")
library(neuralnet)
n<-100 #number of samples to train the NN on
dbcon<-dbConnect(MySQL(),user='g1090423',password='marioboys',dbname='g1090423',host='mydb.ics.purdue.edu')
qry<- paste("SELECT ID, Zipcode, City,BasePrice FROM Warehouse ORDER BY ID DESC LIMIT",n)
recent_entries<-fetch(dbSendQuery(dbcon,qry))
ind<-sample(1:nrow(df),(n*0.70)) #creates the split of data, 70% of n gong to training, 30% going to testing
trainDF<-df[ind,]
testDF<-df[-ind,]
#may not need testDF
#creating the formula for the neural net
allVars<-colnames(recent_entries)
predictorVars<-allVars[!allVars%in%"BasePrice"] #BasePrice is target variable
predictorVars<-paste(predictorVars,collapse = "+")
form<-as.formula(paste("BasePrice~",predictorVars,collapse="+")) #writes formula how its needed for neuralnet
m<-model.matrix(form,data=recent_entries)
m
dbcon<-dbConnect(MySQL(),user='g1090423',password='marioboys',dbname='g1090423',host='mydb.ics.purdue.edu')
qry<- paste("SELECT ID, Zipcode, City,BasePrice FROM Warehouse ORDER BY ID DESC LIMIT",n)
recent_entries_df<-fetch(dbSendQuery(dbcon,qry))
ind<-sample(1:nrow(df),(n*0.70)) #creates the split of data, 70% of n gong to training, 30% going to testing
trainDF<-df[ind,]
testDF<-df[-ind,]
#may not need testDF
#creating the formula for the neural net
allVars<-colnames(recent_entries)
predictorVars<-allVars[!allVars%in%"BasePrice"] #BasePrice is target variable
predictorVars<-paste(predictorVars,collapse = "+")
form<-as.formula(paste("BasePrice~",predictorVars,collapse="+")) #writes formula how its needed for neuralnet
recent_entries<-model_matrix(form,data=recent_entries_df)
neural<-neuralnet(formula=form,hidden=c(2,2), linear.output=T, data=recent_entries)
allVars<-colnames(recent_entries)
predictorVars<-allVars[!allVars%in%"BasePrice"] #BasePrice is target variable
predictorVars<-paste(predictorVars,collapse = "+")
form<-as.formula(paste("BasePrice~",predictorVars,collapse="+")) #writes formula how its needed for neuralnet
dbcon<-dbConnect(MySQL(),user='g1090423',password='marioboys',dbname='g1090423',host='mydb.ics.purdue.edu')
qry<- paste("SELECT ID, Zipcode, City,BasePrice FROM Warehouse ORDER BY ID DESC LIMIT",n)
recent_entries_df<-fetch(dbSendQuery(dbcon,qry))
ind<-sample(1:nrow(df),(n*0.70)) #creates the split of data, 70% of n gong to training, 30% going to testing
trainDF<-df[ind,]
testDF<-df[-ind,]
#may not need testDF
#creating the formula for the neural net
allVars<-colnames(recent_entries_df)
predictorVars<-allVars[!allVars%in%"BasePrice"] #BasePrice is target variable
predictorVars<-paste(predictorVars,collapse = "+")
form<-as.formula(paste("BasePrice~",predictorVars,collapse="+")) #writes formula how its needed for neuralnet
dbcon<-dbConnect(MySQL(),user='g1090423',password='marioboys',dbname='g1090423',host='mydb.ics.purdue.edu')
qry<- paste("SELECT ID, Zipcode, City,BasePrice FROM Warehouse ORDER BY ID DESC LIMIT",n)
recent_entries_df<-fetch(dbSendQuery(dbcon,qry))
qry<- paste("SELECT ID, Zipcode, City,BasePrice FROM Warehouse ORDER BY ID DESC LIMIT",n)
n<-100 #number of samples to train the NN on
n<-100 #number of samples to train the NN on
dbcon<-dbConnect(MySQL(),user='g1090423',password='marioboys',dbname='g1090423',host='mydb.ics.purdue.edu')
qry<- paste("SELECT ID, Zipcode, City,BasePrice FROM Warehouse ORDER BY ID DESC LIMIT",n)
recent_entries_df<-fetch(dbSendQuery(dbcon,qry))
ind<-sample(1:nrow(df),(n*0.70)) #creates the split of data, 70% of n gong to training, 30% going to testing
trainDF<-df[ind,]
testDF<-df[-ind,]
#may not need testDF
#creating the formula for the neural net
allVars<-colnames(recent_entries_df)
predictorVars<-allVars[!allVars%in%"BasePrice"] #BasePrice is target variable
predictorVars<-paste(predictorVars,collapse = "+")
form<-as.formula(paste("BasePrice~",predictorVars,collapse="+")) #writes formula how its needed for neuralnet
recent_entries<-model_matrix(form,data=recent_entries_df)
recent_entries<-model.matrix(form,data=recent_entries_df)
neural<-neuralnet(formula=form,hidden=c(2,2), linear.output=T, data=recent_entries)
head(recent_entries)
tail(recent_entries)
?model.matrix
dbcon<-dbConnect(MySQL(),user='g1090423',password='marioboys',dbname='g1090423',host='mydb.ics.purdue.edu')
qry<- paste("SELECT ID, Zipcode, BasePrice FROM Warehouse ORDER BY ID DESC LIMIT",n)
recent_entries_df<-fetch(dbSendQuery(dbcon,qry))
cityqry<-paste("SELECT City FROM Warehouse ORDER BY ID DESC LIMIT",n)
n<-100 #number of samples to train the NN on
dbcon<-dbConnect(MySQL(),user='g1090423',password='marioboys',dbname='g1090423',host='mydb.ics.purdue.edu')
qry<- paste("SELECT ID, Zipcode, BasePrice FROM Warehouse ORDER BY ID DESC LIMIT",n)
recent_entries_df<-fetch(dbSendQuery(dbcon,qry))
cityqry<-paste("SELECT City FROM Warehouse ORDER BY ID DESC LIMIT",n)
cities_df<-fetch(dbSendQuery(dbcon,cityqry))
cities_df
cities_m<-model.matrix(cities_df)
> cities_m<-model.matrix(data=cities_df)
cities_m<-model.matrix(data=cities_df)
form
allVars<-colnames(recent_entries_df)
predictorVars<-allVars[!allVars%in%"BasePrice"] #BasePrice is target variable
predictorVars<-paste(predictorVars,collapse = "+")
form<-as.formula(paste("BasePrice~",predictorVars,collapse="+"))
form
cityform<-paste("city")
recent_entries<-model.matrix(cityform,data=recent_entries_df)
cityform<-paste("city~")
recent_entries<-model.matrix(cityform,data=recent_entries_df)
n<-100 #number of samples to train the NN on
dbcon<-dbConnect(MySQL(),user='g1090423',password='marioboys',dbname='g1090423',host='mydb.ics.purdue.edu')
qry<- paste("SELECT ID, Zipcode, BasePrice FROM Warehouse ORDER BY ID DESC LIMIT",n)
recent_entries_df<-fetch(dbSendQuery(dbcon,qry))
#cityqry<-paste("SELECT City FROM Warehouse ORDER BY ID DESC LIMIT",n)
#cities_df<-fetch(dbSendQuery(dbcon,cityqry))
ind<-sample(1:nrow(df),(n*0.70)) #creates the split of data, 70% of n gong to training, 30% going to testing
trainDF<-df[ind,]
testDF<-df[-ind,]
#may not need testDF
#creating the formula for the neural net
allVars<-colnames(recent_entries_df)
predictorVars<-allVars[!allVars%in%"BasePrice"] #BasePrice is target variable
predictorVars<-paste(predictorVars,collapse = "+")
form<-as.formula(paste("BasePrice~",predictorVars,collapse="+")) #writes formula how its needed for neuralnet
#cityform<-paste("city")
#recent_entries<-model.matrix(cityform,data=recent_entries_df)
neural<-neuralnet(formula=form,hidden=c(2,2), linear.output=T, data=recent_entries)
neural<-neuralnet(formula=form,hidden=c(2,2), linear.output=T, data=recent_entries_df)
recent_entries_df
as.numeric(recent_entries_df)
recent_entries_df$Zipcode[4]
v<-recent_entries_df$Zipcode[4]
v
as.numeric(v)
n<-100 #number of samples to train the NN on
dbcon<-dbConnect(MySQL(),user='g1090423',password='marioboys',dbname='g1090423',host='mydb.ics.purdue.edu')
qry<- paste("SELECT Zipcode, BasePrice FROM Warehouse ORDER BY ID DESC LIMIT",n)
recent_entries<-fetch(dbSendQuery(dbcon,qry))
#cityqry<-paste("SELECT City FROM Warehouse ORDER BY ID DESC LIMIT",n)
#cities_df<-fetch(dbSendQuery(dbcon,cityqry))
#creating the formula for the neural net
allVars<-colnames(recent_entries_df)
predictorVars<-allVars[!allVars%in%"BasePrice"] #BasePrice is target variable
predictorVars<-paste(predictorVars,collapse = "+")
form<-as.formula(paste("BasePrice~",predictorVars,collapse="+")) #writes formula how its needed for neuralnet
n<-100 #number of samples to train the NN on
dbcon<-dbConnect(MySQL(),user='g1090423',password='marioboys',dbname='g1090423',host='mydb.ics.purdue.edu')
qry<- paste("SELECT Zipcode, BasePrice FROM Warehouse ORDER BY ID DESC LIMIT",n)
recent_entries<-fetch(dbSendQuery(dbcon,qry))
#cityqry<-paste("SELECT City FROM Warehouse ORDER BY ID DESC LIMIT",n)
#cities_df<-fetch(dbSendQuery(dbcon,cityqry))
#creating the formula for the neural net
allVars<-colnames(recent_entriesf)
predictorVars<-allVars[!allVars%in%"BasePrice"] #BasePrice is target variable
predictorVars<-paste(predictorVars,collapse = "+")
form<-as.formula(paste("BasePrice~",predictorVars,collapse="+")) #writes formula how its needed for neuralnet
n<-100 #number of samples to train the NN on
dbcon<-dbConnect(MySQL(),user='g1090423',password='marioboys',dbname='g1090423',host='mydb.ics.purdue.edu')
qry<- paste("SELECT Zipcode, BasePrice FROM Warehouse ORDER BY ID DESC LIMIT",n)
recent_entries<-fetch(dbSendQuery(dbcon,qry))
#cityqry<-paste("SELECT City FROM Warehouse ORDER BY ID DESC LIMIT",n)
#cities_df<-fetch(dbSendQuery(dbcon,cityqry))
#creating the formula for the neural net
allVars<-colnames(recent_entries)
predictorVars<-allVars[!allVars%in%"BasePrice"] #BasePrice is target variable
predictorVars<-paste(predictorVars,collapse = "+")
form<-as.formula(paste("BasePrice~",predictorVars,collapse="+")) #writes formula how its needed for neuralnet
form
recent_entries$Zipcode[,2]
recent_entries$Zipcode[2,]
recent_entries$Zipcode[,]
recent_entries$Zipcode
as.numeric(recent_entries$Zipcode)
recent_entries$Zipcode<-as.numeric(recent_entries$Zipcode)
recent_entries
n<-100 #number of samples to train the NN on
dbcon<-dbConnect(MySQL(),user='g1090423',password='marioboys',dbname='g1090423',host='mydb.ics.purdue.edu')
qry<- paste("SELECT Zipcode, BasePrice FROM Warehouse ORDER BY ID DESC LIMIT",n) #selecting last n warehouse entries
recent_entries<-fetch(dbSendQuery(dbcon,qry))
recent_entries$Zipcode<-as.numeric(recent_entries$Zipcode) #forcing zipcodes to numeric
#creating the formula for the neural net
allVars<-colnames(recent_entries)
predictorVars<-allVars[!allVars%in%"BasePrice"] #BasePrice is target variable
predictorVars<-paste(predictorVars,collapse = "+")
form<-as.formula(paste("BasePrice~",predictorVars,collapse="+")) #writes formula how its needed for neuralnet
neural<-neuralnet(formula=form,hidden=c(2,2), linear.output=T, data=recent_entries)
neural<-neuralnet(formula=form,hidden=2, linear.output=T, data=recent_entries)
recent_entries
recent_entries#BasePrice[2]
recent_entries$BasePrice[2]
recent_entries$BasePrice<-as.numeric(recent_entries$BasePrice)#forcing BasePrices to numeric
neural<-neuralnet(formula=form,hidden=2, linear.output=T, data=recent_entries)
plot(neural)
qry2<-"Select City FROM Warehouse ORDER BY ID LIMIT 100"
cities<-fetch(dbSendQuery(dbcon,qry2))
cities
m<-model.matrix(cities)
m<-model.matrix(formula(~cities),cities)
n<-100 #number of samples to train the NN on
dbcon<-dbConnect(MySQL(),user='g1090423',password='marioboys',dbname='g1090423',host='mydb.ics.purdue.edu')
qry<- paste("SELECT Zipcode, StorageCapacity, StorageType, BasePrice FROM Warehouse ORDER BY ID DESC LIMIT",n) #selecting last n warehouse entries
recent_entries<-fetch(dbSendQuery(dbcon,qry))
recent_entries$Zipcode<-as.numeric(recent_entries$Zipcode) #forcing zipcodes to numeric
recent_entries$BasePrice<-as.numeric(recent_entries$BasePrice)#forcing BasePrices to numeric
#creating the formula for the neural net
allVars<-colnames(recent_entries)
predictorVars<-allVars[!allVars%in%"BasePrice"] #BasePrice is target variable
predictorVars<-paste(predictorVars,collapse = "+")
form<-as.formula(paste("BasePrice~",predictorVars,collapse="+")) #writes formula how its needed for neuralnet
recent_entries
n<-100 #number of samples to train the NN on
dbcon<-dbConnect(MySQL(),user='g1090423',password='marioboys',dbname='g1090423',host='mydb.ics.purdue.edu')
qry<- paste("SELECT Zipcode, StorageCapacity, StorageType, BasePrice FROM Warehouse ORDER BY ID DESC LIMIT",n) #selecting last n warehouse entries
recent_entries<-fetch(dbSendQuery(dbcon,qry))
#forcing df values to numerics
recent_entries$Zipcode<-as.numeric(recent_entries$Zipcode)
recent_entries$BasePrice<-as.numeric(recent_entries$BasePrice)
recent_entries$StorageCapacity<-as.numeric(recent_entries$StorageCapacity)
recent_entries$StorageType<-as.numeric(recent_entries$StorageType)
#creating the formula for the neural net
allVars<-colnames(recent_entries)
predictorVars<-allVars[!allVars%in%"BasePrice"] #BasePrice is target variable
predictorVars<-paste(predictorVars,collapse = "+")
form<-as.formula(paste("BasePrice~",predictorVars,collapse="+")) #writes formula how its needed for neuralnet
for (con in all_cons){
dbDisconnect(con)
}
all_cons <- dbListConnections(MySQL())
for (con in all_cons){
dbDisconnect(con)
}
dbListConnections
dbListConnections(MySQL())
n<-100 #number of samples to train the NN on
dbcon<-dbConnect(MySQL(),user='g1090423',password='marioboys',dbname='g1090423',host='mydb.ics.purdue.edu')
qry<- paste("SELECT Zipcode, StorageCapacity, StorageType, BasePrice FROM Warehouse ORDER BY ID DESC LIMIT",n) #selecting last n warehouse entries
recent_entries<-fetch(dbSendQuery(dbcon,qry))
#forcing df values to numerics
recent_entries$Zipcode<-as.numeric(recent_entries$Zipcode)
recent_entries$BasePrice<-as.numeric(recent_entries$BasePrice)
recent_entries$StorageCapacity<-as.numeric(recent_entries$StorageCapacity)
recent_entries$StorageType<-as.numeric(recent_entries$StorageType)
#creating the formula for the neural net
allVars<-colnames(recent_entries)
predictorVars<-allVars[!allVars%in%"BasePrice"] #BasePrice is target variable
predictorVars<-paste(predictorVars,collapse = "+")
form<-as.formula(paste("BasePrice~",predictorVars,collapse="+")) #writes formula how its needed for neuralnet
form
neural<-neuralnet(formula=form,hidden=2, linear.output=T, data=recent_entries)
plot(neural)
all_cons <- dbListConnections(MySQL())
for (con in all_cons){
dbDisconnect(con)
}
neural<-neuralnet(formula=form,hidden=c(3,2), linear.output=T, data=recent_entries)
plot(neural)
cities
as.numeric("hello")
citiesqry<-paste("SELECT City FROM Warehouse ORDER BY ID DESC LIMIT",n)
cities_query
cities_qry
citiesqry
cities<-fetch(dbSendQuery(dbcon,citiesqry))
n<-100 #number of samples to train the NN on
dbcon<-dbConnect(MySQL(),user='g1090423',password='marioboys',dbname='g1090423',host='mydb.ics.purdue.edu')
qry<- paste("SELECT Zipcode, StorageCapacity, StorageType, BasePrice FROM Warehouse ORDER BY ID DESC LIMIT",n) #selecting last n warehouse entries
recent_entries<-fetch(dbSendQuery(dbcon,qry))
citiesqry<-paste("SELECT City FROM Warehouse ORDER BY ID DESC LIMIT",n)
cities<-fetch(dbSendQuery(dbcon,citiesqry))
#may be able to pull down cities separately, rbind to recent_entries, then try model.matrix
all_cons <- dbListConnections(MySQL())
for (con in all_cons){
dbDisconnect(con)
}
cities
rbind(recent_entries,cities)
n<-100 #number of samples to train the NN on
dbcon<-dbConnect(MySQL(),user='g1090423',password='marioboys',dbname='g1090423',host='mydb.ics.purdue.edu')
qry<- paste("SELECT Zipcode, StorageCapacity, StorageType, BasePrice,Latitude,Longitude FROM Warehouse ORDER BY ID DESC LIMIT",n) #selecting last n warehouse entries
recent_entries<-fetch(dbSendQuery(dbcon,qry))
#may be able to pull down cities separately, rbind to recent_entries, then try model.matrix
all_cons <- dbListConnections(MySQL())
for (con in all_cons){
dbDisconnect(con)
}
n<-100 #number of samples to train the NN on
dbcon<-dbConnect(MySQL(),user='g1090423',password='marioboys',dbname='g1090423',host='mydb.ics.purdue.edu')
qry<- paste("SELECT Zipcode, StorageCapacity, StorageType, BasePrice,Latitude,Longitude FROM Warehouse ORDER BY ID DESC LIMIT",n) #selecting last n warehouse entries
recent_entries<-fetch(dbSendQuery(dbcon,qry))
#may be able to pull down cities separately, rbind to recent_entries, then try model.matrix
all_cons <- dbListConnections(MySQL())
for (con in all_cons){
dbDisconnect(con)
}
#forcing df values to numerics
recent_entries$Zipcode<-as.numeric(recent_entries$Zipcode)
recent_entries$BasePrice<-as.numeric(recent_entries$BasePrice)
recent_entries$StorageCapacity<-as.numeric(recent_entries$StorageCapacity)
recent_entries$StorageType<-as.numeric(recent_entries$StorageType)
recent_entries$Latitude<-as.numeric(recent_entries$Latitude)
recent_entries$Longitude<-as.numeric(recent_entries$Longitude)
#creating the formula for the neural net
allVars<-colnames(recent_entries)
predictorVars<-allVars[!allVars%in%"BasePrice"] #BasePrice is target variable
predictorVars<-paste(predictorVars,collapse = "+")
form<-as.formula(paste("BasePrice~",predictorVars,collapse="+")) #writes formula how its needed for neuralnet
neural<-neuralnet(formula=form,hidden=c(3,2), linear.output=T, data=recent_entries)
plot(neural)
neural<-neuralnet(formula=form,hidden=c(4,2), linear.output=T, data=recent_entries)
plot(neural)
all_cons <- dbListConnections(MySQL())
for (con in all_cons){
dbDisconnect(con)
}
n<-10
n
paste("hello",n,"there")
source('~/GitHub/WARIE/simulation/DailyNN.R')
plot(neural)
require("neuralnet")
require("neuralnet")
library(neuralnet)
n<-2000 #number of samples to train the NN on
dbcon<-dbConnect(MySQL(),user='g1090423',password='marioboys',dbname='g1090423',host='mydb.ics.purdue.edu')
qry<- paste("SELECT Zipcode, StorageCapacity, StorageType, BasePrice,Latitude,Longitude FROM Warehouse ORDER BY ID DESC LIMIT",n) #selecting last n warehouse entries
recent_entries<-fetch(dbSendQuery(dbcon,qry))
#training based on lat/long could create a pattern of certain regions being more expensive
all_cons <- dbListConnections(MySQL())
for (con in all_cons){
dbDisconnect(con)
}
#forcing df values to numerics
recent_entries$Zipcode<-as.numeric(recent_entries$Zipcode)
recent_entries$BasePrice<-as.numeric(recent_entries$BasePrice)
recent_entries$StorageCapacity<-as.numeric(recent_entries$StorageCapacity)
recent_entries$StorageType<-as.numeric(recent_entries$StorageType)
recent_entries$Latitude<-as.numeric(recent_entries$Latitude)
recent_entries$Longitude<-as.numeric(recent_entries$Longitude)
#creating the formula for the neural net
allVars<-colnames(recent_entries)
predictorVars<-allVars[!allVars%in%"BasePrice"] #BasePrice is target variable
predictorVars<-paste(predictorVars,collapse = "+")
form<-as.formula(paste("BasePrice~",predictorVars,collapse="+")) #writes formula how its needed for neuralnet
neural<-neuralnet(formula=form,hidden=c(4,2), linear.output=T, data=recent_entries)
#This is how you would test/use neural net
#predictions<-compute(neural,test_data[,x:y]) #[,x:y] is to ensure that we use all variables used for prediction, excluding price (bc price is the target)
#predicted_prices<-round(predictions[[2]],digits=2)
plot(neural)
recent_entires
recent_entries
head(recent_entries)
?DataFrame.to_html
storage_type<-2
start_date1<-Sys.Date()+1
end_date1<-Sys.Date()+60
city<-"Fort Worth"
storage_needed<-2000
sort_val<-1
results<-Search(storage_type,start_date1,end_date1,city,storage_needed,sort_val)
source('W:/www/Search.R')
results<-Search(storage_type,start_date1,end_date1,city,storage_needed,sort_val)
currentDay<-Sys.Date()
start_date1
start_date1-currentDay
as.numeric(ceiling((end_date1-currentDay)))
as.numeric(ceiling((end_date1-currentDay)/7))
results<-Search(storage_type,start_date1,end_date1,city,storage_needed,sort_val)
start_date1-currentDay
as.numeric(start_date1-currentDay)
as.numeric((start_date1-currentDay)/7)
as.numeric(ceiling((start_date1-currentDay)/7))
start_date<-as.numeric(ceiling((start_date1 - currentDay)/7)) #get start date in the format of "number of weeks out from today"
start_date1
start_date1-Sys.Date()
results<-Search(storage_type,start_date1,end_date1,city,storage_needed,sort_val)
source('W:/www/Search.R')
results<-Search(storage_type,start_date1,end_date1,city,storage_needed,sort_val)
start_date1<-"2018-11-20"
results<-Search(storage_type,start_date1,end_date1,city,storage_needed,sort_val)
start_date1<-as.date("2018-11-20")
start_date1<-as.Date("2018-11-20")
end_date1<-as.Date(end_date1)
results<-Search(storage_type,start_date1,end_date1,city,storage_needed,sort_val)
source('W:/www/Search.R')
results<-Search(storage_type,start_date1,end_date1,city,storage_needed,sort_val)
results
source('W:/www/Search.R')
results<-Search(storage_type,start_date1,end_date1,city,storage_needed,sort_val)
args<-commandArgs(TRUE)
storage_type<-args[1]
start_date1<-as.Date(args[2])
end_date1<-as.Date(args[3])
city<-args[4]
storage_needed<-args[5]
sort_val<-args[6]
#Connect db
mydb<-dbConnect(MySQL(),user="g1090423",password="marioboys",dbname="g1090423",host = "mydb.ics.purdue.edu")
currentDay<-Sys.Date()
#Dates will round up per week, so that contracts are all last a certain whole number of weeks
start_date<-as.numeric(ceiling((start_date1 - currentDay)/7)) #get start date in the format of "number of weeks out from today"
end_date<-as.numeric(ceiling((end_date1- currentDay)/7)) #get end date in the format of "number of weeks out from today"
#Create query that will return all eligible warehouses
qry1<-paste("SELECT W.ID,StorageCapacity,BasePrice,Zipcode,City,State,Owner_ID,R.Rating as Owner_Rating FROM (Warehouse W inner JOIN (SELECT MIN(Open_Space),WarehouseID FROM Availability WHERE WeekFromDate BETWEEN",start_date, "AND", end_date, "Group By WarehouseID) A ON W.ID = A.WarehouseID)
INNER JOIN (SELECT Rating,Owner.ID FROM Owner) R ON W.Owner_ID=R.ID WHERE StorageType =",storage_type)
qry<-paste(qry1," AND City = '",city,"'",sep="")
#return warehouses from the above query
qry
args
qry
source('W:/www/Search.R')
results<-Search(storage_type,start_date1,end_date1,city,storage_needed,sort_val)
storage_type<-2
start_date1<-Sys.Date()+1
end_date1<-Sys.Date()+61
city<-"Fort Worth"
storage_needed<-1
sort_val<-1
results<-Search(storage_type,start_date1,end_date1,city,storage_needed,sort_val)
qry
mydb<-dbConnect(MySQL(),user="g1090423",password="marioboys",dbname="g1090423",host = "mydb.ics.purdue.edu")
currentDay<-Sys.Date()
#Dates will round up per week, so that contracts are all last a certain whole number of weeks
start_date<-as.numeric(ceiling((start_date1 - currentDay)/7)) #get start date in the format of "number of weeks out from today"
end_date<-as.numeric(ceiling((end_date1- currentDay)/7)) #get end date in the format of "number of weeks out from today"
#Create query that will return all eligible warehouses
qry1<-paste("SELECT W.ID,StorageCapacity,BasePrice,Zipcode,City,State,Owner_ID,R.Rating as Owner_Rating FROM (Warehouse W inner JOIN (SELECT MIN(Open_Space),WarehouseID FROM Availability WHERE WeekFromDate BETWEEN",start_date, "AND", end_date, "Group By WarehouseID) A ON W.ID = A.WarehouseID)
INNER JOIN (SELECT Rating,Owner.ID FROM Owner) R ON W.Owner_ID=R.ID WHERE StorageType =",storage_type)
qry<-paste(qry1," AND City = '",city,"'",sep="")
#return warehouses from the above query
filtered_warehouses<-fetch(dbSendQuery(mydb, qry),n=-1)
qry
source('~/GitHub/WARIE/simulation/InitiateDatabase.R')
InitiateDatabase()
